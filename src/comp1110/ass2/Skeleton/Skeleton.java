package comp1110.ass2.Skeleton;

public class Skeleton {
    /**
     * We have 2 players, and accordingly 5 factories.
     * Created by u7235955.
     */
    public final int Max_Players_Number = 2;
    public final int Max_Factories_Number = 5;

    /**
     * In Azul, there are 100 tiles.
     * Created by u7235955.
     */
    public final int Tiles = 100;


    /**
     * Five colors for 100 tiles.
     * Created by u7235955.
     */
    enum Color{
        Blue('a'),
        Green('b'),
        Orange('c'),
        Purple('d'),
        Red('e');
        private char color;
        private Color(char ch){
            this.color = ch;
        }
    }

    /**
     * state[0] represents shared state string, and state[1] represents player states string.
     * Created by u7235955.
     */
    public String [] state = new String[2];

    /**
     * Decide the color of tiles.
     * i can be generated by random() function.
     * Created by u7235955.
     */
    public char TileColor(int i){
        if(i <= 20)
            return Color.Blue.color;
        if(i <= 40)
            return Color.Green.color;
        if(i <= 60)
            return Color.Orange.color;
        if(i <= 80)
            return Color.Purple.color;
        return Color.Red.color;
    }

    /**
     * Maybe the first method we call in the main method.
     * To set the state[0] shared state string, and state[1] player states string.
     * More specifically, to set factory 0 ~ 4 (randomly).
     * Created by u7235955.
     */
    public void GameStart(){

    }

    /**
     * We need to choose 4 * 5 tiles for 5 factories of 100 tiles randomly.
     * Created by u7235955.
     */
    public int RandomTiles(){
        return 0;
    }

    /**
     * Take an character as argument, find the index of it in s.
     * ch can be 'C', 'B', 'M' etc.
     * s can be the state[0] or state[1].
     * Created by u7235955.
     */
    public int FindIndex(String s, char ch){
        return 0;
    }

    /**judge whether the 5 characters are letters
     *created by u7235221
     */
    private boolean isFiveLetters(String str){
        for (int i=0;i<str.length();i++){
            if ((str.charAt(i)>='A' &&str.charAt(i)<='Z')||str.charAt(i)>='a'&&str.charAt(i)<='z'){
                continue;
            }else{
                return false;
            }
        }
        return true;
    }

    /**judge what kind of tiles should be put in the Centre part
     *created by u7235221
     */
    public boolean isCENTRE(){
        return false;
    }
    

    /**judge who is the first one to take tiles from the Centre Part
     * created by u7235221
     */
    public boolean whether_the_first_take_tiles_from_Centre(){
        return false;
    }

    /**decide the surplus tiles should be put in the floor
     *created by u7235221
     */
    public boolean Floor(){
        return true;
    }

    /**to judge which tile is the rightest tile in a row that should be moved into mosaic
     *created by u7235221
     */
    public boolean storage_TO_mosaic(){
        return true;
    }


    /**calculate the score of each player
     *created by u7235221
     */
    public int score(){
        return 0;
    }

    /** check whether the player satisfy the the condition for getting additional bonus
     * created by u6738850
     */
    public boolean whether_get_bonus_point () { return true; }
}
